#!/bin/bash
# Created by @srepac on 07/19/2021
# Scripted Menu using dialog as per @mdevaev's request
#
# Pre-requisite:  All scripts called by this script has to be in /usr/local/bin/
#
# HISTORY:
# 07/19/21  srepac   v1.0 created script
#                    pikvm-info, hdmi-chk, pikvm-imgbkup, update hostname, change timezone, reboot, and update OS
# 07/20/21  srepac   v1.1 added yamlchecker, DHCP fix, and free up space
#                    v1.2 added check for current KVMD version from github -- add message to Update OS entry
#                    v1.3 bugfix: DHCP fix required rw and ro
# 07/21/21  srepac   v1.4 enhancement: included running version in actionrequired window - Update OS
#                    updated update command as per max to use `pacman --noconfirm --ask=4 -Su`
#                    v1.5 indicated in main menu which items require reboot to take effect
#                    v1.6 error check timezone file entered is valid
#                    v1.7 added entry to download all srepac's scripts (also added 'about')
#                    v1.8 bug fixes after beta testing with @Arch1mede
#                    v1.9 error check: make sure BACKUPDIR path is an NFS mount (otherwise, it'll fill up /)
#                    v1.10 show amount of space freed up
# 07/22/21  srepac   v1.11 removed 'backup' from main menu (left backend code alone)
#                    ... enable only for NFS users that want image backup
#                    v1.12 setup additional global variables
#                    v1.13 download getpikvm-scripts automatically during first run
#
# VERSION=1.13
DIALOG="$( which dialog ) --clear"
SCRIPTDIR="/usr/local/bin"
#
HOSTFILE="/etc/hostname"
META="/etc/kvmd/meta.yaml"
OVERRIDE="/etc/kvmd/override.yaml"
CACHEDIR="/var/cache/pacman/pkg"


dl-getpikvmscripts() {
  SCRIPTNAME=getpikvm-scripts
  CMD=$SCRIPTDIR/$SCRIPTNAME
  if [ ! -e $CMD ]; then
    rw
    wget -O $CMD https://raw.githubusercontent.com/srepac/packages/master/getpikvm-scripts > /dev/null 2> /dev/null
    dos2unix $CMD > /dev/null 2> /dev/null; chmod +x $CMD
    ro
  fi
} # end dl-getpikvmscripts 


# show confirmation window (yes or no options only) -- reusable code 
actionreqwin() {  # default: 10 lines high and 70 chars wide
  HT=10
  WIDTH=70
  if [[ "$3" != "" ]]; then HT=$3; fi
  if [[ "$4" != "" ]]; then WIDTH=$4; fi
  $DIALOG --title "$1" --yesno "$2" $HT $WIDTH
} # end actionreqwin


# show a message window (only option is to close window) -- reusable code
mesgwin() {       # default: 10 lines high and 70 chars wide
  HT=10
  WIDTH=70
  if [[ "$3" != "" ]]; then HT=$3; fi
  if [[ "$4" != "" ]]; then WIDTH=$4; fi
  $DIALOG --title "$1" --msgbox "$2" $HT $WIDTH
} # end mesgwin


# show contents of a file into textbox (only option is to close window) -- reusable code
textwin() {       # default: 10 lines high and 70 chars wide
  HT=10
  WIDTH=70
  if [[ "$3" != "" ]]; then HT=$3; fi
  if [[ "$4" != "" ]]; then WIDTH=$4; fi
  $DIALOG --title "$1" --textbox "$2" $HT $WIDTH
} # end textwin


check-run-script() {
  # requires three arguments:  TITLE, scriptname, and window height
  title="$1"
  scriptname="$2"
  height="$3"
  if [[ "$4" == "-b" ]]; then
    background=1
  else
    background=0
  fi

  output="/tmp/$scriptname.out"
  CMD="$SCRIPTDIR/$scriptname"

  if [ -e $CMD ]; then
    if [ $background -eq 1 ]; then
      actionreqwin "RUN SCRIPT" "\nAre you sure want to run $CMD?"
      if [ $? -eq 0 ]; then
        rm -f $output; $CMD > /dev/null 2>&1 &   # force to run in background
      fi
    else
      rm -f $output; $CMD > $output
      textwin "$title" "$output" $height 85
    fi
  else
    filenotfound $link
  fi
} # end check-run-script


filenotfound() {
    mesgwin "File not found" "\n$CMD does not exist.\n\nPlease download it from $1\n\nIf you like this program, please paypal me @ $EMAIL\nDonations are welcome, but not required." 20
} # end filenotfound


show-hostname-meta() {
  textwin "$HOSTFILE" $HOSTFILE 10 40
  textwin "$META" $META 15 70
} # end show /etc/hostname and /etc/meta.yaml


do-something() {
  case $selection in

    about)
      mesgwin  "About this program"  "Written by GitHub user @srepac as requested by @mdevaev\n\nProgram was created to address solutions to many PiKVM users' feature requests. If you'd like to request a feature, please paypal me at $EMAIL so that I can continue to make this feature complete.\n\nPlease send all feature requests to the same email address.\n\nOf course, donations are welcome, but not required.\n\nhttps://pastebin.com/u/srepac" 20 80
      ;;

    newhostname)
      tempfile="/tmp/hostname"
      $DIALOG --title "Custom Hostname" --inputbox "\nType hostname you would like to change to:" 10 51 2>$tempfile
      choice=$?
      if [ $choice -eq 0 ]; then  # OK was pressed
        if [ `cat $tempfile | wc -w` -gt 0 ]; then    # user entered some text
          actionreqwin "COMMANDS TO RUN" "\ncp $tempfile $HOSTFILE\nNEWNAME=`cat $tempfile`\nOLDNAME=`grep host: $META | awk '{print $NF}'`\nsed -i -e s/\$OLDNAME/\$NEWNAME/g $META"
          if [ $? -eq 0 ]; then   # User selected YES to actually run commands
            rw
            cp $tempfile $HOSTFILE
            NEWNAME=`cat $tempfile`
            OLDNAME=`grep host: $META | awk '{print $NF}'`
            sed -i -e "s/$OLDNAME/$NEWNAME/g" $META
            ro
            show-hostname-meta
            rebootreqd=1
          fi
        fi
      fi
      ;;

    showhost)
      show-hostname-meta
      ;;

    info)
      SCRIPTNAME=pikvm-info
      TITLE="PiKVM Information"
      check-run-script "$TITLE" $SCRIPTNAME 40
      ;;

    capture)
      SCRIPTNAME=hdmi-chk
      TITLE="HDMI Capture Checker"
      check-run-script "$TITLE" $SCRIPTNAME 10
      ;;

    backup)
      SCRIPTNAME=pikvm-imgbkup
      TITLE="PiKVM SD Card Image Backup"
      CMD="$SCRIPTDIR/$SCRIPTNAME"
      if [ `ps -ef | grep $CMD | grep -v grep | wc -l` -eq 0 ]; then
        if [ -e $CMD ]; then
          actionreqwin "ACTION REQUIRED" "\nAre you sure want to run SD Card Image Backup to NFS mount?"
          if [ $? -eq 0 ]; then
            BACKUPDIR=$( grep ^BACKUPDIR= $CMD | cut -d'"' -f2 )
            if [ $(mount | grep $BACKUPDIR | grep nfs | wc -l) -eq 1 ]; then
              $DIALOG --title "Running SD Card Image Backup - $IMGFILE" --prgbox "yes | $SCRIPTNAME" 40 70
            else
              mesgwin  "ACTION REQUIRED"  "\nMount point $BACKUPDIR is not an NFS mount.  Please add the relevant entry in /etc/fstab for the nfs mount and then run\n\n  mount $BACKUPDIR\n\nRetry again after NFS export is mounted on Pi.\n\nRecommend you run the script manually then try again.\n\n  $CMD" 20
            fi
          fi
        else
          filenotfound $link
        fi
        #check-run-script "$TITLE" $SCRIPTNAME 10 "-b"    # force to run in background
      else
        tempfile="/tmp/$SCRIPTNAME.ps"
        ps -ef | grep $CMD| grep -v grep | awk '{print "Another SD Card Image backup is running.\nPlease wait for the other process to finish.\n\nPID", $2, $5, $NF}' > $tempfile
        textwin "INFORMATIONAL MESSAGE" "$tempfile"
      fi
      ;;

    timezone)
      actionreqwin "TIMEZONE CHANGE" "\nChange ${localtime} to something else?"
      if [ $? -eq 0 ]; then
        NEWTIME=$( $DIALOG --stdout --title "Please enter new timezone file:" --fselect /usr/share/zoneinfo/ 14 48 )
        if [ $? -eq 0 ]; then
          if [ ! -e $NEWTIME ]; then
            mesgwin "INVALID TIMEZONE"  "\nYou picked an incorrect/incomplete timezone file.\n\n$NEWTIME"
          else
            actionreqwin "ACTION REQUIRED" "\nPerform the following:\n\n  rm /etc/localtime\n  ln -s $NEWTIME /etc/localtime"
            if [ $? -eq 0 ]; then
              rw; rm /etc/localtime; ln -s $NEWTIME /etc/localtime; ro
            fi
          fi
        fi
      fi
      ;;

    dhcpfix)  # fix only applies if DHCP=yes in _ETH0 file
      ### if fix already in place or STATIC IP configuration, then just show the file contents
      _ETH0="/etc/systemd/network/eth0.network"
      # Add ClientIdentifier=mac entry for eth0 DHCP configuration
      if [[ $( grep -i ^DHCP=yes ${_ETH0} | wc -l ) -gt 0 ]]; then
        if [[ $( grep -i ^ClientIdentifier ${_ETH0} | wc -l ) -eq 0 ]]; then
          actionreqwin  "Fix Different DHCP IP at every boot"  "\nProceed with adding ClientIdentifier=mac?"
          if [ $? -eq 0 ]; then
            rw
            cat <<end_clientid >> "${_ETH0}"
# Use same IP by forcing to use MAC address for clientID
[DHCP]
ClientIdentifier=mac
end_clientid
            ro
            rebootreqd=1
          fi
        fi
      fi
      textwin "$_ETH0" "$_ETH0" 15 70    # show contents of eth0.network file
      ;;

    freespace)
      FREEDUP=$( du -sh $CACHEDIR | awk '{print $1}' )
      actionreqwin  "FREE UP SPACE"  "\nThis will free up $FREEDUP of space.\n\nAre you sure you want to clear out pacman pkg cache?"
      if [ $? -eq 0 ]; then
        $DIALOG --title "Cleared pacman cache" --prgbox "rw && rm -f $CACHEDIR/* && ro; echo ls -l $CACHEDIR; ls -l $CACHEDIR" 10 70
      fi
      ;;

    yamlcheck)
      SCRIPTNAME=yamlchecker.sh
      TITLE="Check YAML syntax of $OVERRIDE"
      CMD="${SCRIPTDIR}/${SCRIPTNAME}"
      if [ -e $CMD ]; then
        actionreqwin  "$TITLE"  "\nAre you sure you want to run the following?\n\n$CMD $OVERRIDE"
        if [ $? -eq 0 ]; then
          $DIALOG --title "Checking YAML syntax of $OVERRIDE" --prgbox "$CMD $OVERRIDE" 40 100
        fi
      else
        filenotfound $link
      fi
      ;;

    update)
      ACTION="UPDATE"
      actionreqwin  "$ACTION PI-KVM"  "\nYou are currently running v${kvmdver}\n\nAre you sure you want to $ACTION Pi-KVM OS/packages to v${KVMDNEW}?"
      if [ $? -eq 0 ]; then
        $DIALOG --title "$ACTION Pi-KVM OS" --prgbox "rw && pacman -Syy && pacman --noconfirm --ask=4 -Su" 40 100
        rebootreqd=1
      else
        rebootreqd=0
      fi
      ;;

    getall)
      SCRIPTNAME=getpikvm-scripts
      TITLE="Download srepac's scripts"
      CMD="$SCRIPTDIR/$SCRIPTNAME"
      if [ -e $CMD ]; then
        actionreqwin  "ACTION REQUIRED"  "\nDownload all srepac public pastebin into /usr/local/bin/?"
        if [ $? -eq 0 ]; then
          cd /usr/local/bin/
          $DIALOG --title "$TITLE" --prgbox "yes | $CMD all && ls -l /usr/local/bin" 40 100
          cd -
        fi
      else
        link="https://pastebin.com/raw/vqwK9uXV"
        filenotfound $link
        actionreqwin  "ACTION REQUIRED"  "\nDo you want to be able to copy/paste the link to download ${SCRIPTNAME}?"
        if [ $? -eq 0 ]; then
          clear; printf "\nPlease copy the URL below into your web browser so you can download the $SCRIPTNAME\n\n$link\n\n"
          read -p "Press ENTER when done. " enter
        fi
      fi
      ;;

    reboot)
      actionreqwin  "REBOOT PI-KVM"  "\nAre you sure you want to REBOOT Pi-KVM?"
      if [ $? -eq 0 ]; then
        reboot
        exit 0
      fi
      ;;

    quit)
      exit 0
      ;;

    *)
      mesgwin  "INFORMATIONAL MESSAGE"  "\nYour selection [ $selection ] is not yet implemented."
      main
      ;;

  esac
  main
} # end do-something


main() {
  link="https://pastebin.com/u/srepac"
  tempfile=/tmp/test$$
  trap "rm -f $tempfile" 0 1 2 5 15
  if [[ ${rebootreqd} -eq 1 ]]; then
    rebootmsg="*** required ***"
  else
    rebootmsg=""
  fi

  localtime=$( ls -l /etc/localtime | awk -F\/ '{print $NF}' )

  $DIALOG --title "Pi-KVM SCRIPT MENU" \
        --menu "Custom Configuration/Scripts menu - Hostname:  $(hostname)\nItems with * require reboot to take effect" 22 70 4 \
        "about"       "About this program" \
        "getall"      "Get srepac public pastebins into $SCRIPTDIR" \
        "info"        "Show PiKVM information" \
        "capture"     "Check capture card connection" \
        "showhost"    "Show $HOSTFILE and $META" \
        "newhostname" "* Change $HOSTFILE and $META" \
        "dhcpfix"     "* Fix Different eth0 DHCP IP at boot" \
        "timezone"    "Change /etc/localtime - $localtime" \
        "freespace"   "Free up space from $CACHEDIR" \
        "yamlcheck"   "Check YAML syntax of $OVERRIDE" \
        "update"      "* Update PiKVM OS/packages - $updatemesg" \
        "reboot"      "Reboot PiKVM $rebootmsg" \
        "quit"        "Quit program" 2> $tempfile

        ### move the following in between getall and update above if NFS user
        #"backup"      "Backup Full SD Card Image to NFS" \

  retval=$?
  selection=`cat $tempfile`

  case $retval in
    0)
      do-something
      ;;
    1)
      message="Cancel pressed."
      exit 0
      ;;
    255)
      message="ESC pressed."
      exit 0
      ;;
  esac
} # main menu

#### MAIN STARTS HERE ####
EMAIL="epascual@gmail.com"

# Check for the latest kvmd version from github
LATESTKVMD="/tmp/kvmd.version"; /bin/rm -f $LATESTKVMD
wget -O $LATESTKVMD https://github.com/pikvm/kvmd/raw/master/kvmd/__init__.py 2> /dev/null > /dev/null
KVMDNEW=$( grep __version__ $LATESTKVMD | awk -F\" '{print $2}')
kvmdver=$( pacman -Q | grep kvmd-platform | cut -d' ' -f2 | sed 's/-[1-9]//g' )
if [[ "$KVMDNEW" == "$kvmdver" ]]; then
  updatemesg="current v$kvmdver"
else
  updatemesg="v$KVMDNEW available"
fi

KVMDVER=$( pacman -Q | grep kvmd-platform | cut -d' ' -f2 )
IMGFILE="`hostname`-$KVMDVER.img.gz"

dl-getpikvmscripts
main
