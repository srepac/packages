#!/bin/bash
# Script creates an exact image of the running Pi-KVM SD card into an NFS mounted share
#
# Update the mount line below to reflect the IP Address:/mount/point shared from your NFS server
# ... that you are mounting at BACKUPDIR=
#
# Note:  The .img create will be the size of the SD card; recommend you use the same size or larger when restoring
#
# You can use the created .img or .img.gz with BalenaEtcher or Pi Imager to create a backup SD card
#
# srepac   03/07/2021   created script
# srepac   03/08/2021   updated file created to include KVMD version (i.e. pikvm-2.30-1.img)
# srepac   03/09/2021   updated image creation to perform multi-core compression
# srepac   03/12/2021   updated to rely on /etc/fstab entry for NFS mount
# srepac   03/17/2021   updated to check if no /etc/fstab entry, then ask user for NFS-IP:/path/to/mount
#                       ... break out of script if mount unsuccessful so as not to fill up SD card
# srepac   03/18/2021   updated to perform error checking of NFS mount info
#
# Sample entry in your /etc/fstab should look as follows:
#
#   IP.AD.DR.ES:/path/to/export /mnt/DROPBOX nfs      noauto,rw,soft    0 0			<-- won't be automounted at boot
#   IP.AD.DR.ES:/path/to/export /mnt/DROPBOX nfs      auto,rw,soft    0 0			<-- automounted at boot
#
get_nfs_mount() {
   invalidinput=1
   while [ $invalidinput -eq 1 ]; do
     read -p "Please enter the name/IP of the NFS server: " NFSSRV
     read -p "Please enter the path to mount from NFS server: " NFSPATH

     SHOWMOUNTS="/tmp/showmount.$NFSSRV"; /bin/rm -f $SHOWMOUNTS
     showmount -e $NFSSRV > $SHOWMOUNTS
     if [[ $( grep "${NFSPATH} " $SHOWMOUNTS | wc -l ) -lt 1 ]]; then
        echo "*** NFS Server [ $NFSSRV ] does not have path [ $NFSPATH ] exported.  Please double-check your inputs and try again!"
        echo
        cat $SHOWMOUNTS
        invalidinput=1
        echo
     else
        invalidinput=0
     fi
   done
} # end get_nfs_mount function

chk-inst-packages() {
   # Check for package dependencies and install if needed
   # nfs-utils required to mount NFS
   if [[ $(pacman -Q | egrep nfs-utils | wc -l) -le 0 ]]; then
        pacman -S nfs-utils
   fi
   # pigz is multi-core compression vs. gzip (single core)
   if [[ $(pacman -Q | egrep pigz | wc -l) -le 0 ]]; then
        pacman -S pigz
   fi
} # end chk-inst-packages function

### MAIN STARTS HERE ###
set -x
KVMDVER=$( pacman -Q | grep 'kvmd ' | awk '{print $2}' )

rw
chk-inst-packages

# mount NFS share to save backup image to
BACKUPDIR="/mnt/DROPBOX"
mkdir -p ${BACKUPDIR}
# Check to see if there is no entry in /etc/fstab for the NFS mount
# If it doesn't exist, then ask the user the NFS server:/path/to/mount
if [[ $( mount | grep $BACKUPDIR | wc -l ) -eq 1 ]]; then
        echo "$BACKUPDIR is already mounted."
elif [[ $( grep ${BACKUPDIR} /etc/fstab | grep -v '#' | wc -l ) -lt 1 ]]; then
        get_nfs_mount
        echo "mount ${NFSSRV}:${NFSPATH} ${BACKUPDIR}"
        mount ${NFSSRV}:${NFSPATH} ${BACKUPDIR} 2> /dev/null
else    # rely on /etc/fstab entry
        mount ${BACKUPDIR} 2> /dev/null
fi
ro

# Check to see if successful mount, if not, break out of script
if [[ $(df -h | grep ${BACKUPDIR} | wc -l) -lt 1 ]]; then
        echo "mount failed. Exiting."
        exit 1
fi

# Original
#IMAGEFILE="${BACKUPDIR}/$(hostname)-${KVMDVER}.img.gz"
# Updated to include YYYYMMDD-HHmm in the filename
IMAGEFILE="${BACKUPDIR}/$(hostname)-$(date +%Y%m%d-%H%M)-${KVMDVER}.img.gz"

# Create image of running SD card (read 4MB at a time and show progress)
dd if=/dev/mmcblk0 bs=4M status=progress | pigz -c > ${IMAGEFILE}

du -sh ${IMAGEFILE}
